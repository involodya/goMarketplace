// Code generated by mockery v2.40.3. DO NOT EDIT.

package entity

import mock "github.com/stretchr/testify/mock"

// MockAuthManager is an autogenerated mock type for the AuthManager type
type MockAuthManager struct {
	mock.Mock
}

type MockAuthManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthManager) EXPECT() *MockAuthManager_Expecter {
	return &MockAuthManager_Expecter{mock: &_m.Mock}
}

// FetchAuthn provides a mock function with given fields: tokenString
func (_m *MockAuthManager) FetchAuthn(tokenString string) (*map[string]string, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for FetchAuthn")
	}

	var r0 *map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*map[string]string, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *map[string]string); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthManager_FetchAuthn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAuthn'
type MockAuthManager_FetchAuthn_Call struct {
	*mock.Call
}

// FetchAuthn is a helper method to define mock.On call
//   - tokenString string
func (_e *MockAuthManager_Expecter) FetchAuthn(tokenString interface{}) *MockAuthManager_FetchAuthn_Call {
	return &MockAuthManager_FetchAuthn_Call{Call: _e.mock.On("FetchAuthn", tokenString)}
}

func (_c *MockAuthManager_FetchAuthn_Call) Run(run func(tokenString string)) *MockAuthManager_FetchAuthn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthManager_FetchAuthn_Call) Return(_a0 *map[string]string, _a1 error) *MockAuthManager_FetchAuthn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthManager_FetchAuthn_Call) RunAndReturn(run func(string) (*map[string]string, error)) *MockAuthManager_FetchAuthn_Call {
	_c.Call.Return(run)
	return _c
}

// MakeAuthn provides a mock function with given fields: userID
func (_m *MockAuthManager) MakeAuthn(userID uint) (string, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for MakeAuthn")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthManager_MakeAuthn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeAuthn'
type MockAuthManager_MakeAuthn_Call struct {
	*mock.Call
}

// MakeAuthn is a helper method to define mock.On call
//   - userID uint
func (_e *MockAuthManager_Expecter) MakeAuthn(userID interface{}) *MockAuthManager_MakeAuthn_Call {
	return &MockAuthManager_MakeAuthn_Call{Call: _e.mock.On("MakeAuthn", userID)}
}

func (_c *MockAuthManager_MakeAuthn_Call) Run(run func(userID uint)) *MockAuthManager_MakeAuthn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockAuthManager_MakeAuthn_Call) Return(_a0 string, _a1 error) *MockAuthManager_MakeAuthn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthManager_MakeAuthn_Call) RunAndReturn(run func(uint) (string, error)) *MockAuthManager_MakeAuthn_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthManager creates a new instance of MockAuthManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthManager {
	mock := &MockAuthManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
