// Code generated by mockery v2.40.3. DO NOT EDIT.

package entity

import (
	entity "fullstack/backend/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: id
func (_m *MockUserService) Get(id uint) (*entity.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*entity.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *entity.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUserService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id uint
func (_e *MockUserService_Expecter) Get(id interface{}) *MockUserService_Get_Call {
	return &MockUserService_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockUserService_Get_Call) Run(run func(id uint)) *MockUserService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockUserService_Get_Call) Return(_a0 *entity.User, _a1 error) *MockUserService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Get_Call) RunAndReturn(run func(uint) (*entity.User, error)) *MockUserService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: userLogin
func (_m *MockUserService) Login(userLogin *entity.UserLogin) (uint, error) {
	ret := _m.Called(userLogin)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.UserLogin) (uint, error)); ok {
		return rf(userLogin)
	}
	if rf, ok := ret.Get(0).(func(*entity.UserLogin) uint); ok {
		r0 = rf(userLogin)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(*entity.UserLogin) error); ok {
		r1 = rf(userLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - userLogin *entity.UserLogin
func (_e *MockUserService_Expecter) Login(userLogin interface{}) *MockUserService_Login_Call {
	return &MockUserService_Login_Call{Call: _e.mock.On("Login", userLogin)}
}

func (_c *MockUserService_Login_Call) Run(run func(userLogin *entity.UserLogin)) *MockUserService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.UserLogin))
	})
	return _c
}

func (_c *MockUserService_Login_Call) Return(_a0 uint, _a1 error) *MockUserService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Login_Call) RunAndReturn(run func(*entity.UserLogin) (uint, error)) *MockUserService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: userReg
func (_m *MockUserService) Register(userReg *entity.UserRegister) error {
	ret := _m.Called(userReg)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.UserRegister) error); ok {
		r0 = rf(userReg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - userReg *entity.UserRegister
func (_e *MockUserService_Expecter) Register(userReg interface{}) *MockUserService_Register_Call {
	return &MockUserService_Register_Call{Call: _e.mock.On("Register", userReg)}
}

func (_c *MockUserService_Register_Call) Run(run func(userReg *entity.UserRegister)) *MockUserService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.UserRegister))
	})
	return _c
}

func (_c *MockUserService_Register_Call) Return(_a0 error) *MockUserService_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_Register_Call) RunAndReturn(run func(*entity.UserRegister) error) *MockUserService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
