// Code generated by mockery v2.40.3. DO NOT EDIT.

package entity

import (
	entity "fullstack/backend/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockItemService is an autogenerated mock type for the ItemService type
type MockItemService struct {
	mock.Mock
}

type MockItemService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockItemService) EXPECT() *MockItemService_Expecter {
	return &MockItemService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0
func (_m *MockItemService) Create(_a0 *entity.Item) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Item) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockItemService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockItemService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 *entity.Item
func (_e *MockItemService_Expecter) Create(_a0 interface{}) *MockItemService_Create_Call {
	return &MockItemService_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *MockItemService_Create_Call) Run(run func(_a0 *entity.Item)) *MockItemService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Item))
	})
	return _c
}

func (_c *MockItemService_Create_Call) Return(_a0 error) *MockItemService_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockItemService_Create_Call) RunAndReturn(run func(*entity.Item) error) *MockItemService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *MockItemService) Get(id uint) (*entity.Item, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*entity.Item, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *entity.Item); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockItemService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockItemService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id uint
func (_e *MockItemService_Expecter) Get(id interface{}) *MockItemService_Get_Call {
	return &MockItemService_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockItemService_Get_Call) Run(run func(id uint)) *MockItemService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockItemService_Get_Call) Return(_a0 *entity.Item, _a1 error) *MockItemService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockItemService_Get_Call) RunAndReturn(run func(uint) (*entity.Item, error)) *MockItemService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySeller provides a mock function with given fields: id
func (_m *MockItemService) GetBySeller(id uint) (*[]entity.Item, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBySeller")
	}

	var r0 *[]entity.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*[]entity.Item, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *[]entity.Item); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockItemService_GetBySeller_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySeller'
type MockItemService_GetBySeller_Call struct {
	*mock.Call
}

// GetBySeller is a helper method to define mock.On call
//   - id uint
func (_e *MockItemService_Expecter) GetBySeller(id interface{}) *MockItemService_GetBySeller_Call {
	return &MockItemService_GetBySeller_Call{Call: _e.mock.On("GetBySeller", id)}
}

func (_c *MockItemService_GetBySeller_Call) Run(run func(id uint)) *MockItemService_GetBySeller_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockItemService_GetBySeller_Call) Return(_a0 *[]entity.Item, _a1 error) *MockItemService_GetBySeller_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockItemService_GetBySeller_Call) RunAndReturn(run func(uint) (*[]entity.Item, error)) *MockItemService_GetBySeller_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockItemService creates a new instance of MockItemService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockItemService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockItemService {
	mock := &MockItemService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
