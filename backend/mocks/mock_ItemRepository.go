// Code generated by mockery v2.40.3. DO NOT EDIT.

package entity

import (
	entity "fullstack/backend/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockItemRepository is an autogenerated mock type for the ItemRepository type
type MockItemRepository struct {
	mock.Mock
}

type MockItemRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockItemRepository) EXPECT() *MockItemRepository_Expecter {
	return &MockItemRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0
func (_m *MockItemRepository) Create(_a0 *entity.Item) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Item) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockItemRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockItemRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 *entity.Item
func (_e *MockItemRepository_Expecter) Create(_a0 interface{}) *MockItemRepository_Create_Call {
	return &MockItemRepository_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *MockItemRepository_Create_Call) Run(run func(_a0 *entity.Item)) *MockItemRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Item))
	})
	return _c
}

func (_c *MockItemRepository_Create_Call) Return(_a0 error) *MockItemRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockItemRepository_Create_Call) RunAndReturn(run func(*entity.Item) error) *MockItemRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockItemRepository) Delete(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockItemRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockItemRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint
func (_e *MockItemRepository_Expecter) Delete(id interface{}) *MockItemRepository_Delete_Call {
	return &MockItemRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockItemRepository_Delete_Call) Run(run func(id uint)) *MockItemRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockItemRepository_Delete_Call) Return(_a0 error) *MockItemRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockItemRepository_Delete_Call) RunAndReturn(run func(uint) error) *MockItemRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *MockItemRepository) Get(id uint) (*entity.Item, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*entity.Item, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *entity.Item); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockItemRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockItemRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id uint
func (_e *MockItemRepository_Expecter) Get(id interface{}) *MockItemRepository_Get_Call {
	return &MockItemRepository_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockItemRepository_Get_Call) Run(run func(id uint)) *MockItemRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockItemRepository_Get_Call) Return(_a0 *entity.Item, _a1 error) *MockItemRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockItemRepository_Get_Call) RunAndReturn(run func(uint) (*entity.Item, error)) *MockItemRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *MockItemRepository) GetAll() (*[]entity.Item, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *[]entity.Item
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]entity.Item, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]entity.Item); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Item)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockItemRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockItemRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockItemRepository_Expecter) GetAll() *MockItemRepository_GetAll_Call {
	return &MockItemRepository_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockItemRepository_GetAll_Call) Run(run func()) *MockItemRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockItemRepository_GetAll_Call) Return(_a0 *[]entity.Item, _a1 error) *MockItemRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockItemRepository_GetAll_Call) RunAndReturn(run func() (*[]entity.Item, error)) *MockItemRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySeller provides a mock function with given fields: id
func (_m *MockItemRepository) GetBySeller(id uint) (*[]entity.Item, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBySeller")
	}

	var r0 *[]entity.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*[]entity.Item, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *[]entity.Item); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockItemRepository_GetBySeller_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySeller'
type MockItemRepository_GetBySeller_Call struct {
	*mock.Call
}

// GetBySeller is a helper method to define mock.On call
//   - id uint
func (_e *MockItemRepository_Expecter) GetBySeller(id interface{}) *MockItemRepository_GetBySeller_Call {
	return &MockItemRepository_GetBySeller_Call{Call: _e.mock.On("GetBySeller", id)}
}

func (_c *MockItemRepository_GetBySeller_Call) Run(run func(id uint)) *MockItemRepository_GetBySeller_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockItemRepository_GetBySeller_Call) Return(_a0 *[]entity.Item, _a1 error) *MockItemRepository_GetBySeller_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockItemRepository_GetBySeller_Call) RunAndReturn(run func(uint) (*[]entity.Item, error)) *MockItemRepository_GetBySeller_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0
func (_m *MockItemRepository) Update(_a0 *entity.Item) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Item) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockItemRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockItemRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 *entity.Item
func (_e *MockItemRepository_Expecter) Update(_a0 interface{}) *MockItemRepository_Update_Call {
	return &MockItemRepository_Update_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *MockItemRepository_Update_Call) Run(run func(_a0 *entity.Item)) *MockItemRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Item))
	})
	return _c
}

func (_c *MockItemRepository_Update_Call) Return(_a0 error) *MockItemRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockItemRepository_Update_Call) RunAndReturn(run func(*entity.Item) error) *MockItemRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockItemRepository creates a new instance of MockItemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockItemRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockItemRepository {
	mock := &MockItemRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
