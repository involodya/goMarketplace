openapi: 3.0.3
info:
  title: Visit manage system - OpenAPI 3.0
  version: 0.1.0
  description: |-
    This is a sample API for a system of visit managing based on the OpenAPI 3.0 specification.
servers:
  - url: http://localhost/api
  - url: http://158.160.117.148/api
paths:
  /:
    get:
      summary: Index endpoint
      description: Returns a simple hello world message.
      responses:
        '200':
          description: Hello world message received successfully.
          content:
            text/plain:
              schema:
                type: string
                example: Hello, world!

  /user:
    get:
      summary: Get User Information
      description: Retrieves information about the currently authenticated user.
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successfully retrieved user information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: Unauthorized, invalid or missing authentication token.

  /register:
    post:
      summary: Register a New User
      description: Registers a new user with the provided details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: successful registration
        '400':
          description: Bad request due to invalid input.

  /login:
    post:
      summary: User Login
      description: Authenticates the user and returns a token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful, token provided in response.
          headers:
            Authorization:
              description: Bearer token for the authenticated user.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized, login failed.

  /stats:
    get:
      summary: Get User Stats
      description: Retrieves statistics related to the user's activity.
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successfully retrieved user stats.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStats'
        '401':
          description: Unauthorized, invalid or missing authentication token.

  /items:
    get:
      summary: Get User Items
      description: Retrieves items listed by the currently authenticated user.
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successfully retrieved items.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '401':
          description: Unauthorized, invalid or missing authentication token.

  /item/{item_id}:
    get:
      summary: Get Item Information
      description: Retrieves detailed information about a specific item by ID.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: item_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved item information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '401':
          description: Unauthorized, invalid or missing authentication token.
        '403':
          description: Forbidden, user does not have access to this item.
        '404':
          description: Not found, item does not exist.
    post:
      summary: Update Item Information
      description: Updates the information for an item by ID.
      security:
        - bearerAuth: [ ]
      parameters:
        - name: item_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemUpdate'
      responses:
        '200':
          description: Item updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '401':
          description: Unauthorized, invalid or missing authentication token.
        '403':
          description: Forbidden, user does not have access to update this item.
        '404':
          description: Not found, item does not exist.

  /item/create:
    post:
      summary: Create a New Item
      description: Creates a new item with the given details.
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemCreate'
      responses:
        '200':
          description: Item created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '401':
          description: Unauthorized, invalid or missing authentication token.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: user@example.com

    UserRegister:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: securePassword123

    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: securePassword123

    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: Login successful

    UserStats:
      type: object
      properties:
        item_count:
          type: integer
          example: 10

    Item:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Item Name"
        description:
          type: string
          example: "Item description here."
        sellerID:
          type: integer
          example: 1

    ItemCreate:
      allOf:
        - $ref: '#/components/schemas/Item'
        - type: object
          properties:
            price:
              type: number
              format: float
              example: 19.99

    ItemUpdate:
      allOf:
        - $ref: '#/components/schemas/ItemCreate'
        - type: object
          properties:
            updateReason:
              type: string
              example: "Updated pricing."